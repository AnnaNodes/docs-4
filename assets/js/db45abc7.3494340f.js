"use strict";(self.webpackChunkdocs_2=self.webpackChunkdocs_2||[]).push([[1662],{3905:(t,e,r)=>{r.d(e,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var i=n.createContext({}),l=function(t){var e=n.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):c(c({},e),t)),r},p=function(t){var e=l(t.components);return n.createElement(i.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,i=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),u=l(r),d=a,h=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(h,c(c({ref:e},p),{},{components:r})):n.createElement(h,c({ref:e},p))}));function d(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,c=new Array(o);c[0]=u;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:a,c[1]=s;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1344:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={},c="Verifying Smart Contracts",s={unversionedId:"developing/Cosmwasm Smart Contracts/cosmwasm-verify-contract",id:"developing/Cosmwasm Smart Contracts/cosmwasm-verify-contract",title:"Verifying Smart Contracts",description:"The following are the steps needed to verify any contract from the chain. In this particular example a brand new contract uploaded to the testnet.",source:"@site/docs/developing/Cosmwasm Smart Contracts/cosmwasm-verify-contract.md",sourceDirName:"developing/Cosmwasm Smart Contracts",slug:"/developing/Cosmwasm Smart Contracts/cosmwasm-verify-contract",permalink:"/docs/developing/Cosmwasm Smart Contracts/cosmwasm-verify-contract",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/developing/Cosmwasm Smart Contracts/cosmwasm-verify-contract.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cosmwasm & Beaker on testnet",permalink:"/docs/developing/Cosmwasm Smart Contracts/cosmwasm-testnet"},next:{title:"Javascript & Smart Contracts",permalink:"/docs/developing/Cosmwasm Smart Contracts/javascript"}},i={},l=[{value:"Create new contract",id:"create-new-contract",level:3},{value:"Contract info",id:"contract-info",level:3},{value:"Contract version",id:"contract-version",level:3},{value:"Downloading the Contract from the network",id:"downloading-the-contract-from-the-network",level:3},{value:"Getting the hash",id:"getting-the-hash",level:3},{value:"Verify hash",id:"verify-hash",level:3}],p={toc:l};function m(t){let{components:e,...r}=t;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"verifying-smart-contracts"},"Verifying Smart Contracts"),(0,a.kt)("p",null,"The following are the steps needed to verify any contract from the chain. In this particular example a brand new contract uploaded to the testnet. "),(0,a.kt)("h3",{id:"create-new-contract"},"Create new contract"),(0,a.kt)("p",null,"Follow ",(0,a.kt)("a",{parentName:"p",href:"https://docs.osmosis.zone/developing/dapps/get_started/cosmwasm-testnet.html"},"this guide")," to create a new contract with Beaker."),(0,a.kt)("p",null,"Output:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/13665117/176251934-121d6422-808b-4d42-b482-98ac792af633.png",alt:"create-contract"}),"  "),(0,a.kt)("p",null,"Once the contract is created query the contract information. Assuming you are connected to the testnet. "),(0,a.kt)("h3",{id:"contract-info"},"Contract info"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"osmosisd query wasm contract osmo1mpf0guu0t363xrshhedandypq003ahzaxvsxzgu69n3ej03mh2zqx5gk8l\n\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/13665117/176260093-1fc8ac27-dbd6-4f3b-86c8-341112496db4.png",alt:"contract-info"}),"  "),(0,a.kt)("h3",{id:"contract-version"},"Contract version"),(0,a.kt)("p",null,"Get the contract version by running the following command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"osmosisd query wasm contract-state raw osmo1mpf0guu0t363xrshhedandypq003ahzaxvsxzgu69n3ej03mh2zqx5gk8l 636F6E74726163745F696E666F --node https://rpc-test.osmosis.zone:443 --output json | jq  -r .data | base64 -d | jq\n")),(0,a.kt)("p",null,"What in the world is ",(0,a.kt)("inlineCode",{parentName:"p"},"636F6E74726163745F696E666F"),"? \ud83d\ude15 "),(0,a.kt)("p",null,'ContractInfo is must be stored under "contract_info" key which translates to "636F6E74726163745F696E666F" in hex format. As documented ',(0,a.kt)("a",{parentName:"p",href:"https://lib.rs/crates/cw2"},"here"),"."),(0,a.kt)("p",null,"Output:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/13665117/176259801-3b961c4c-c757-4a80-a9b1-c893c6306789.png",alt:"contract-version"}),"  "),(0,a.kt)("h3",{id:"downloading-the-contract-from-the-network"},"Downloading the Contract from the network"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"osmosisd query wasm code 205 205_code.wasm --node https://rpc-test.osmosis.zone:443\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/13665117/176260453-0a1ed7c4-e850-4c0d-8e88-3a7de5a7aef9.png",alt:"contract-download"}),"  "),(0,a.kt)("h3",{id:"getting-the-hash"},"Getting the hash"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sha256sum 205_code.wasm\n")),(0,a.kt)("p",null,"Output:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/13665117/176260874-546f1efe-84ee-470c-b050-bff49c2e7d16.png",alt:"contract-hash"}),"  "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"0b662785042cd938d0f0e8142f69d2d23fdf0addec965d1fbeacf44080330016")),(0,a.kt)("h3",{id:"verify-hash"},"Verify hash"),(0,a.kt)("p",null,"Now it's time to verify the hash with the source repos. All contracts should provide a repository with a hash for their contracts the same way that ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CosmWasm/cw-plus/releases"},"cw-plus")," does on their checksum as shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"10bc1a8cf82055106b26136f26137d6bf132df99c2d2098a75d03b64e7fe75a5  cw1155_base.wasm\n539b62678532596c73b27764186623a2bb868f5e67c3e588508c4a28e105e8c9  cw1_subkeys.wasm\nb67bc69fef770c28d48730feb800ea9c91eaae1a608e3ea7819aac64a6e99d92  cw1_whitelist.wasm\n....\n\n")))}m.isMDXComponent=!0}}]);